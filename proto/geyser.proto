syntax = "proto3";

package geyser;

message Heartbeat {}
message EmptyRequest {}

message SubscribePartialAccountUpdatesRequest {
  // If true, will not stream vote account updates.
  bool skip_vote_accounts = 1;
}

message PartialAccountUpdate {
  // Slot this update occurred.
  uint64 slot = 1;

  // Account's pubkey.
  bytes pubkey = 2;

  // Flags whether this update was streamed as part of startup, hence not a realtime update.
  bool is_startup = 3;

  // A monotonically increasing number specifying the order of this update.
  // Can be used to determine what the latest update for an account was at
  // a given slot, assuming there were multiple updates.
  uint64 seq = 4;

  // Transaction signature that caused this update.
  optional string tx_signature = 5;
}

message AccountUpdate {
  // Slot this update occurred.
  uint64 slot = 1;

  // Account's pubkey.
  bytes pubkey = 2;

  // Account's lamports post update.
  uint64 lamports = 3;

  // Account's owner.
  bytes owner = 4;

  // Flags whether an account is executable.
  bool executable = 5;

  // The epoch at which this account will next owe rent.
  uint64 rent_epoch = 6;

  // Account's data post update.
  bytes data = 7;

  // A monotonically increasing number specifying the order of this update.
  // Can be used to determine what the latest update for an account was at
  // a given slot, assuming there were multiple updates.
  uint64 seq = 8;

  // Flags whether this update was streamed as part of startup i.e. not a real-time update.
  bool is_startup = 9;

  // Is this write sent because it matches the connector criterion?
  // If false, then it is sent because this address previously matched
  // the criterion (i.e. account is closed/reused)
  bool is_selected = 10;

  // Transaction signature that caused this update.
  optional string tx_signature = 11;
}

message SlotUpdate {
  uint64 slot = 1;
  optional uint64 parent = 2;
  enum Status {
    CONFIRMED = 0;
    PROCESSED = 1;
    ROOTED = 2;
  }
  Status status = 3;
}

message MaybeAccountUpdate {
  oneof msg {
    AccountUpdate account_update = 1;
    Heartbeat hb = 2;
  }
}

message MaybePartialAccountUpdate {
  oneof msg {
    PartialAccountUpdate account_update = 1;
    Heartbeat hb = 2;
  }
}

service Geyser {
  // Subscribes to account updates in the accounts database; additionally pings client with empty heartbeats.
  // Upon initially connecting the client can expect a `highest_write_slot` set in the http headers.
  // The `highest_write_slot` is the highest slot observed for an account update thus far.
  rpc SubscribeAccountUpdates(EmptyRequest) returns (stream MaybeAccountUpdate) {}

  // Functions similarly to `SubscribeAccountUpdates`, consuming less bandwidth; also, additionally pings client with empty heartbeats.
  rpc SubscribePartialAccountUpdates(SubscribePartialAccountUpdatesRequest) returns (stream MaybeAccountUpdate) {}

  // Subscribes to slot updates.
  rpc SubscribeSlotUpdates(EmptyRequest) returns (stream SlotUpdate) {}
}
